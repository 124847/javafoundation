package dayone;

import java.util.Scanner;

/*
方法是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集
注意
方法必须先创建才可以使用，该过程称为方法定义
方法创建后并不是直接运行的，需要手动使用后才能执行，该过程称为方法的调用
eg: 无参数的方法
public static void 方法名(){
        方法体;
}
调用 方法名();
带参数的方法定义
public static void 方法名(数据类型 变量名1，数据类型 变量名2 ......){
}
带参数的调用 方法名(参数); 参数的数量与类型必须与方法定义中的设置相匹配

形参和实参
形参:方法定义中的参数
实参:方法调用中的参数

带返回值方法的定义和调用
eg: public static 数据类型 方法名(参数){
            return 数据类型 ;       注意方法定义时return后面的返回值与方法定义上的数据类型要匹配
                }

方法的注意事项
方法不能嵌套定义
void表示无返回值,可以省略return,也可以单独的书写return,后面不加数据



方法的通用格式
格式：public static 返回值类型 方法名(参数){
        方法体;
        return 数据;
}
public static 修饰符
返回值类型 如果有返回值要写上该返回值类型即可 如果没有返回值写void  写void后一般方法体中不写return;
方法名  调用方法时使用的标识
参数    由数据类型和变量名组成，多个参数之间用逗号隔开
方法体  完成功能的代码块
return 如果方法操作完毕，有数据返回, 用于把数据返回给调用者


两个明确 明确返回值类型 明确参数

方法重载
多个方法放在同一个类中
多个方法具有相同的方法名
多个方法的参数不相同，类型不同或者数量不同
和返回值类型无关 在调用的时候，java虚拟机会通过参数的不同来区分同名的方法
重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载

对于基本数据类型的参数,形式参数的改变，不影响实际参数的值
对于引用类型的参数，形参的改变，影响实际参数的值

debug调试又被成为断点调试
*/
//
public class 方法 {
    public static void main(String[] args) {
        int[] a = {19,28,37,46,50};
        change(a);
        for (int i : a) {
            System.out.print(i+",");
        }
    }

    public static boolean change(int[] a) {
        for (int i = 0; i < a.length / 2; i++) {
            int t = a[i];
            a[i] = a[a.length - i - 1];
            a[a.length - i - 1] = t;
        }
       return false;
    }
}
